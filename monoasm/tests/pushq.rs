  extern crate monoasm;
  extern crate monoasm_macro;
  use std::io::Write;

  use monoasm::*;
  use monoasm_macro::monoasm;

  #[test]
  fn pushq() {
      let mut jit: JitMemory = JitMemory::new();
      monoasm!(
          jit,
	pushq rax;
	pushq rcx;
	pushq rdx;
	pushq rbx;
	pushq rsp;
	pushq rbp;
	pushq rsi;
	pushq rdi;
	pushq r8;
	pushq r9;
	pushq r10;
	pushq r11;
	pushq r12;
	pushq r13;
	pushq r14;
	pushq r15;
	pushq [rax];
	pushq [rax + 16];
	pushq [rax + 512];
	pushq [rcx];
	pushq [rcx + 16];
	pushq [rcx + 512];
	pushq [rdx];
	pushq [rdx + 16];
	pushq [rdx + 512];
	pushq [rbx];
	pushq [rbx + 16];
	pushq [rbx + 512];
	pushq [rsp];
	pushq [rsp + 16];
	pushq [rsp + 512];
	pushq [rbp];
	pushq [rbp + 16];
	pushq [rbp + 512];
	pushq [rsi];
	pushq [rsi + 16];
	pushq [rsi + 512];
	pushq [rdi];
	pushq [rdi + 16];
	pushq [rdi + 512];
	pushq [r8];
	pushq [r8 + 16];
	pushq [r8 + 512];
	pushq [r9];
	pushq [r9 + 16];
	pushq [r9 + 512];
	pushq [r10];
	pushq [r10 + 16];
	pushq [r10 + 512];
	pushq [r11];
	pushq [r11 + 16];
	pushq [r11 + 512];
	pushq [r12];
	pushq [r12 + 16];
	pushq [r12 + 512];
	pushq [r13];
	pushq [r13 + 16];
	pushq [r13 + 512];
	pushq [r14];
	pushq [r14 + 16];
	pushq [r14 + 512];
	pushq [r15];
	pushq [r15 + 16];
	pushq [r15 + 512];
	pushq [rip];
	pushq [rip + 16];
	pushq [rip + 512];
	pushq [rax + rax * 1];
	pushq [rax + rax * 2];
	pushq [rax + rax * 4];
	pushq [rax + rax * 8];
	pushq [rax + r15 * 1];
	pushq [rax + r15 * 2];
	pushq [rax + r15 * 4];
	pushq [rax + r15 * 8];
	pushq [rcx + rax * 1];
	pushq [rcx + rax * 2];
	pushq [rcx + rax * 4];
	pushq [rcx + rax * 8];
	pushq [rcx + r15 * 1];
	pushq [rcx + r15 * 2];
	pushq [rcx + r15 * 4];
	pushq [rcx + r15 * 8];
	pushq [rdx + rax * 1];
	pushq [rdx + rax * 2];
	pushq [rdx + rax * 4];
	pushq [rdx + rax * 8];
	pushq [rdx + r15 * 1];
	pushq [rdx + r15 * 2];
	pushq [rdx + r15 * 4];
	pushq [rdx + r15 * 8];
	pushq [rbx + rax * 1];
	pushq [rbx + rax * 2];
	pushq [rbx + rax * 4];
	pushq [rbx + rax * 8];
	pushq [rbx + r15 * 1];
	pushq [rbx + r15 * 2];
	pushq [rbx + r15 * 4];
	pushq [rbx + r15 * 8];
	pushq [rsp + rax * 1];
	pushq [rsp + rax * 2];
	pushq [rsp + rax * 4];
	pushq [rsp + rax * 8];
	pushq [rsp + r15 * 1];
	pushq [rsp + r15 * 2];
	pushq [rsp + r15 * 4];
	pushq [rsp + r15 * 8];
	pushq [rbp + rax * 1];
	pushq [rbp + rax * 2];
	pushq [rbp + rax * 4];
	pushq [rbp + rax * 8];
	pushq [rbp + r15 * 1];
	pushq [rbp + r15 * 2];
	pushq [rbp + r15 * 4];
	pushq [rbp + r15 * 8];
	pushq [rsi + rax * 1];
	pushq [rsi + rax * 2];
	pushq [rsi + rax * 4];
	pushq [rsi + rax * 8];
	pushq [rsi + r15 * 1];
	pushq [rsi + r15 * 2];
	pushq [rsi + r15 * 4];
	pushq [rsi + r15 * 8];
	pushq [rdi + rax * 1];
	pushq [rdi + rax * 2];
	pushq [rdi + rax * 4];
	pushq [rdi + rax * 8];
	pushq [rdi + r15 * 1];
	pushq [rdi + r15 * 2];
	pushq [rdi + r15 * 4];
	pushq [rdi + r15 * 8];
	pushq [r8 + rax * 1];
	pushq [r8 + rax * 2];
	pushq [r8 + rax * 4];
	pushq [r8 + rax * 8];
	pushq [r8 + r15 * 1];
	pushq [r8 + r15 * 2];
	pushq [r8 + r15 * 4];
	pushq [r8 + r15 * 8];
	pushq [r9 + rax * 1];
	pushq [r9 + rax * 2];
	pushq [r9 + rax * 4];
	pushq [r9 + rax * 8];
	pushq [r9 + r15 * 1];
	pushq [r9 + r15 * 2];
	pushq [r9 + r15 * 4];
	pushq [r9 + r15 * 8];
	pushq [r10 + rax * 1];
	pushq [r10 + rax * 2];
	pushq [r10 + rax * 4];
	pushq [r10 + rax * 8];
	pushq [r10 + r15 * 1];
	pushq [r10 + r15 * 2];
	pushq [r10 + r15 * 4];
	pushq [r10 + r15 * 8];
	pushq [r11 + rax * 1];
	pushq [r11 + rax * 2];
	pushq [r11 + rax * 4];
	pushq [r11 + rax * 8];
	pushq [r11 + r15 * 1];
	pushq [r11 + r15 * 2];
	pushq [r11 + r15 * 4];
	pushq [r11 + r15 * 8];
	pushq [r12 + rax * 1];
	pushq [r12 + rax * 2];
	pushq [r12 + rax * 4];
	pushq [r12 + rax * 8];
	pushq [r12 + r15 * 1];
	pushq [r12 + r15 * 2];
	pushq [r12 + r15 * 4];
	pushq [r12 + r15 * 8];
	pushq [r13 + rax * 1];
	pushq [r13 + rax * 2];
	pushq [r13 + rax * 4];
	pushq [r13 + rax * 8];
	pushq [r13 + r15 * 1];
	pushq [r13 + r15 * 2];
	pushq [r13 + r15 * 4];
	pushq [r13 + r15 * 8];
	pushq [r14 + rax * 1];
	pushq [r14 + rax * 2];
	pushq [r14 + rax * 4];
	pushq [r14 + rax * 8];
	pushq [r14 + r15 * 1];
	pushq [r14 + r15 * 2];
	pushq [r14 + r15 * 4];
	pushq [r14 + r15 * 8];
	pushq [r15 + rax * 1];
	pushq [r15 + rax * 2];
	pushq [r15 + rax * 4];
	pushq [r15 + rax * 8];
	pushq [r15 + r15 * 1];
	pushq [r15 + r15 * 2];
	pushq [r15 + r15 * 4];
	pushq [r15 + r15 * 8];
      );
      jit.finalize();
      let mut buf = std::fs::File::create("tests/pushq_monoasm.bin").unwrap();
      buf.write_all(jit.as_slice()).unwrap();
  }
